AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: cognito Sample SAM Template for cognito

Parameters:
  UserPoolName:
    Type: String
    Default: RbacUserPool
    Description: Name of the Cognito User Pool

  ApiName:
    Type: String
    Default: RbacApi
    Description: Name of the API Gateway REST API

Resources:
  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: true

  # Cognito App Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: rbac-app-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthFlows:
        - implicit
        - code
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      CallbackURLs:
        - https://google.com

  # Cognito Groups (Roles)
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      UserPoolId: !Ref CognitoUserPool
      Description: Administrators with full access

  EditorGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Editor
      UserPoolId: !Ref CognitoUserPool
      Description: Editors with create/update access

  ViewerGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Viewer
      UserPoolId: !Ref CognitoUserPool
      Description: Viewers with read-only access

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Ref ApiName
      StageName: dev
      Auth:
        # Remove the DefaultAuthorizer here - we'll specify auth per endpoint
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            Identity:
              Header: Authorization
            AuthorizationScopes:
              - openid
      DefinitionBody:
        swagger: '2.0'
        info:
          title: !Ref ApiName
        paths:
          /resources:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetResourcesFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses: {}
              security:
                - CognitoAuthorizer: []
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateResourceFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses: {}
              security:
                - CognitoAuthorizer: []
          /admin:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AdminFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses: {}
              security:
                - CognitoAuthorizer: []
          /users:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses: { }
              security:
                - CognitoAuthorizer: [ ]
          /register:
            post:
              security: []  # No security required
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterUserFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses: { }
          /confirm:
            post:
              security: []  # No security required
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmRegistrationFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses: { }
          /auth:
            post:
              security: []  # No security required
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthenticationFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses: { }

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: org.essilfie.CreateUserHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          CUSTOM_AWS_REGION: !Ref AWS::Region
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminAddUserToGroup
              Resource: !GetAtt CognitoUserPool.Arn
      Events:
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: org.essilfie.RegisterUserHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          CUSTOM_AWS_REGION: !Ref AWS::Region
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: cognito-idp:SignUp
              Resource: "*"
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /register
            Method: POST
            # No Auth section here - this makes it unsecured

  ConfirmRegistrationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: org.essilfie.ConfirmRegistrationHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref CognitoUserPool
          CUSTOM_AWS_REGION: !Ref AWS::Region
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ConfirmSignUp
                - cognito-idp:AdminAddUserToGroup
              Resource: !GetAtt CognitoUserPool.Arn
      Events:
        ConfirmRegistration:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /confirm
            Method: POST
            # No Auth section here - this makes it unsecured

  AuthenticationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: org.essilfie.AuthenticationHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          CUSTOM_AWS_REGION: !Ref AWS::Region
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: cognito-idp:InitiateAuth
              Resource: "*"
      Events:
        AuthenticateUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth
            Method: POST
            # No Auth section here - this makes it unsecured

  # Lambda Functions
  GetResourcesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: org.essilfie.GetResourcesHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Events:
        GetResources:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /resources
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  CreateResourceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: org.essilfie.CreateResourceHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Events:
        CreateResource:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /resources
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  AdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: org.essilfie.AdminHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Events:
        AdminApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

Outputs:
  CognitoUserPoolId:
    Description: ID of the Cognito User Pool
    Value: !Ref CognitoUserPool

  CognitoUserPoolClientId:
    Description: ID of the Cognito User Pool Client
    Value: !Ref UserPoolClient

  ApiEndpoint:
    Description: URL of the API Gateway endpoint
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev